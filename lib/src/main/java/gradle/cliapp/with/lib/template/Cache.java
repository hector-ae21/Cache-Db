/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gradle.cliapp.with.lib.template;

import gradle.cliapp.with.lib.template.data.structures.*;
import gradle.cliapp.with.lib.template.exceptions.*;
import gradle.cliapp.with.lib.template.utils.FileHandler;
import gradle.cliapp.with.lib.template.utils.Hash;

import java.io.IOException;

/**
 * Cache class
 */
public class Cache implements ICache {

    /**
     * data structure to store the cache
     */
    private ListMap data;

    /**
     * file handler to handle the file
     */
    private final FileHandler fileHandler;

    /**
     * Create a new cache
     * @param collectionName name of the collection
     */
    public Cache(String collectionName) {
        fileHandler = new FileHandler("data\\" + Hash.hashCodesHex(collectionName));
        try {
            data = new ListMap();
            MapEntry[] data = fileHandler.loadFiles();
            if (data != null) {
                for (MapEntry d : data) {
                    this.data.put(d.getKey(), d.getValue());
                }
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * Count the keys (and values) stored in cache.
     * @return Count of keys.
     */
    public int size() {
        return data.size();
    }

    /**
     * Get all keys stored in cache.
     * @return array of stored keys
     */
    public String[] getAll() {
        Object[] keys = data.keys();
        String[] result = new String[keys.length];
        for (int i = 0; i < keys.length; i++) {
            result[i] = (String) keys[i];
        }
        return result;
    }

    /**
     * Get the value associated with the key passed as argument.
     * @param key Key to look for
     * @return The value associated with the key
     * @throws KeyNotFoundException if key does not exist.
     */
    public String get(String key) throws KeyNotFoundException {
        return data.get(key);
    }

    /**
     * Return the value of key passed as argument. Otherwise, return the
     * default value passed as second argument.
     * @param key Key to look for
     * @param defaultValue Value returned when key does not exist.
     * @return The value associated with the key or the defaultValue if key was not
    found.
     */
    public String getOrDefault(String key, String defaultValue) {
            return (data.get(key) != null) ? data.get(key) : defaultValue;
    }

    /**
     * Check is a key exists in cache.
     * @param key Key to look for
     * @return True if key exists.
     */
    public boolean exists(String key) {
        return data.contains(key);
    }

    /**
     * Add or update the value associated to a key.
     * @param key Key to be stored.
     * @param value Value to be stored.
     */
    public void put(String key, String value) {
        data.put(key, value);
        fileHandler.writeToFile(new MapEntry(key, value));
    }

    /**
     * Add a value to a new key. If key already exists, it throws an exception.
     * @param key Key to be stored.
     * @param value Value to be stored.
     * @throws DuplicatedKeyException the key already exists.
     */
    public void addNew(String key, String value) throws DuplicatedKeyException {
        if (data.contains(key)) {
            throw new DuplicatedKeyException();
        } else {
            data.add(key, value);
            fileHandler.writeToFile(new MapEntry(key, value));
        }
    }

    /**
     * Remove a key and its value.
     * @param key Key to be stored.
     * @throws KeyNotFoundException if key does not exist.
     */
    public void remove(String key) throws KeyNotFoundException {
        try {
            if (!data.remove(key)) {
                throw new KeyNotFoundException();
            }
            fileHandler.deleteFile(key);

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
